// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
  // provider = "sqlite"
  // url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model MovieNight {
  id         Int      @id @default(autoincrement())
  title      String?
  startingAt DateTime
  movies     Movie[]  @relation()
  completed  Boolean  @default(false)
}

model Movie {
  id           Int         @id
  title        String
  description  String
  releaseDate  String?
  image        String?
  votes        Vote[]
  movieNightId Int?
  movieNight   MovieNight? @relation(fields: [movieNightId], references: [id])
  submitter    String
  submittedBy  User        @relation(fields: [submitter], references: [id])
  watched      Boolean     @default(false)
  banned       Boolean     @default(false)

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/data-transformers
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @updatedAt

  // @@unique([movieNightId, submitter])
}

model Vote {
  movieId Int
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([movieId, userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  movies        Movie[]
  votes         Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
